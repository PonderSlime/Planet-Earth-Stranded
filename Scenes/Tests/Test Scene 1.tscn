[gd_scene load_steps=21 format=3 uid="uid://b51sxefeu6042"]

[ext_resource type="Shader" path="res://BasicSkyShader.gdshader" id="1_1wex7"]
[ext_resource type="Material" uid="uid://bdhj6so3chp0e" path="res://Assets/Environment/Shaders/test_surface.tres" id="2_5hdbo"]
[ext_resource type="Texture2D" uid="uid://bcedkkbrsj431" path="res://Assets/Environment/Shaders/color_gradient.tres" id="3_laa5c"]
[ext_resource type="Texture2D" uid="uid://did3p25l52we" path="res://Assets/Environment/Shaders/fresnel_gradient.tres" id="4_jf54o"]
[ext_resource type="Texture2D" uid="uid://dxxlswkgbkwak" path="res://Assets/Environment/Textures/Grid.png" id="5_5gfk3"]
[ext_resource type="PackedScene" uid="uid://bd2s4wf2tu7sm" path="res://Scenes/Models/Player/PlayerController.tscn" id="6_kvsvt"]
[ext_resource type="PackedScene" uid="uid://d37h2x7ngrtt3" path="res://Scenes/Models/grass.tscn" id="8_1ssi0"]
[ext_resource type="PackedScene" uid="uid://bd2g0lvgf2pr4" path="res://Scenes/Models/ghibli tree.tscn" id="16_dmme4"]

[sub_resource type="FastNoiseLite" id="FastNoiseLite_4vf81"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_gcwvl"]
width = 1024
height = 1024
seamless = true
noise = SubResource("FastNoiseLite_4vf81")

[sub_resource type="Gradient" id="Gradient_00r5b"]

[sub_resource type="FastNoiseLite" id="FastNoiseLite_d6m4t"]
seed = 1

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_1r243"]
width = 1024
height = 1024
seamless = true
color_ramp = SubResource("Gradient_00r5b")
noise = SubResource("FastNoiseLite_d6m4t")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_v0m6h"]
shader = ExtResource("1_1wex7")
shader_parameter/skyColor = Color(0.534, 0.7476, 0.89, 1)
shader_parameter/horizonColor = Color(0.44253, 0.659817, 0.801639, 1)
shader_parameter/cloud_direction = Vector2(1, 1)
shader_parameter/cloud_direction2 = Vector2(-1, -1)
shader_parameter/cloud_scale = Vector2(0.025, 0.025)
shader_parameter/cloud_distance = 0.01
shader_parameter/cloud_speed = 0.2
shader_parameter/cloud_speed2 = 0.15
shader_parameter/cloud_texture = SubResource("NoiseTexture2D_gcwvl")
shader_parameter/cloud_texture2 = SubResource("NoiseTexture2D_1r243")

[sub_resource type="Sky" id="Sky_el0yp"]
sky_material = SubResource("ShaderMaterial_v0m6h")

[sub_resource type="Environment" id="Environment_pde42"]
background_mode = 2
sky = SubResource("Sky_el0yp")
tonemap_mode = 2
tonemap_exposure = 0.66
tonemap_white = 0.89
ssao_enabled = true
ssao_detail = 1.0
sdfgi_bounce_feedback = 0.01
sdfgi_y_scale = 0
volumetric_fog_enabled = true
volumetric_fog_density = 0.01
volumetric_fog_albedo = Color(0.863766, 0.928117, 0.972493, 1)
volumetric_fog_emission = Color(0.533333, 0.74902, 0.890196, 1)
volumetric_fog_emission_energy = 2.6

[sub_resource type="PlaneMesh" id="PlaneMesh_ljphg"]
size = Vector2(300, 300)

[sub_resource type="Shader" id="Shader_wh0a7"]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_disabled,diffuse_toon,specular_toon;

uniform vec4 tint : source_color;
uniform sampler2D albedo_texture : source_color;
uniform sampler2D color_gradient;
uniform sampler2D fresnel_gradient;

const float color_mult = 1.0f;

uniform sampler2D grid_texture: hint_default_white;
uniform float brightness: hint_range(0.0f, 1.0f) = 1.0f;

vec3 random(vec3 coord)
{
	vec3 res;
	res.x = fract(sin(dot(coord.yz, vec2(12.9898,78.233))) * 43758.5453123);
	res.y = fract(sin(dot(coord.xz, vec2(16.6539,68.698))) * 69845.5962848);
	res.z = fract(sin(dot(coord.xy, vec2(25.5263,41.256))) * 42538.6985436);
	return res;
}

float fresnel(float amount, vec3 normal, vec3 view)
{
	return pow((1.0 - clamp(dot(normalize(normal), normalize(view)), 0.0, 1.0 )), amount);
}

void vertex() {
	// Called for every vertex the material is visible on.
}

void fragment() {
	float basic_fresnel = fresnel(4.0, NORMAL, VIEW);
	ALBEDO = texture(albedo_texture, UV).rgb + (basic_fresnel * texture(fresnel_gradient, vec2(basic_fresnel, 0.0)).rgb * 1.0) * tint.rgb;
	vec4 projected_coords = INV_VIEW_MATRIX * vec4(VERTEX, 1.0);
	vec3 albedoX = texture(grid_texture, projected_coords.zy).rgb;
	vec3 albedoY = texture(grid_texture, projected_coords.xz).rgb;
	vec3 albedoZ = texture(grid_texture, projected_coords.xy).rgb;
	vec3 world_normal = abs(INV_VIEW_MATRIX * vec4(NORMAL, 0.0)).xyz;
	vec3 normal_weights = world_normal / (world_normal.x + world_normal.y + world_normal.z);
	
	vec3 color_offset = random(floor(projected_coords.xyz));
	
	ALBEDO = mix(vec3(0.0f), mix((albedoX * normal_weights.x + albedoY * normal_weights.y + albedoZ * normal_weights.z), color_offset.rgb, 0.05f), brightness) * tint.rgb;
}

void light() {
	float dotproduct = clamp(dot(NORMAL, LIGHT), -0.9, 0.9);
	float sample = clamp((dotproduct + 1.0) * ATTENUATION / 2.1, 0.05, 0.95);
	vec4 shaded = texture(color_gradient, vec2(sample, 0.0));
	DIFFUSE_LIGHT += clamp((shaded.rgb * LIGHT_COLOR), 0.0, 1.0);
	//DIFFUSE_LIGHT += (shaded.rgb * LIGHT_COLOR);
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_k1spc"]
render_priority = 0
shader = SubResource("Shader_wh0a7")
shader_parameter/tint = Color(0.726987, 0.899569, 0.905724, 1)
shader_parameter/brightness = 1.0
shader_parameter/color_gradient = ExtResource("3_laa5c")
shader_parameter/fresnel_gradient = ExtResource("4_jf54o")
shader_parameter/grid_texture = ExtResource("5_5gfk3")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_jm846"]
render_priority = 0
shader = SubResource("Shader_wh0a7")
shader_parameter/tint = Color(0.726987, 0.899569, 0.905724, 1)
shader_parameter/brightness = 1.0
shader_parameter/color_gradient = ExtResource("3_laa5c")
shader_parameter/fresnel_gradient = ExtResource("4_jf54o")
shader_parameter/grid_texture = ExtResource("5_5gfk3")

[node name="Node3D" type="Node3D"]

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_pde42")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="WorldEnvironment"]
transform = Transform3D(0.707107, -0.5, 0.5, 0, 0.707107, 0.707107, -0.707107, -0.5, 0.5, 0, 0, 0)
shadow_enabled = true

[node name="Water" type="CSGMesh3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -1.85645, -2.04963, 49.5589)
material_override = ExtResource("2_5hdbo")
use_collision = true
mesh = SubResource("PlaneMesh_ljphg")

[node name="Wall" type="CSGBox3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -6.22449, 15.1587, 1)
material_override = SubResource("ShaderMaterial_k1spc")
use_collision = true
size = Vector3(8, 200, 12)

[node name="Wall3" type="CSGBox3D" parent="."]
transform = Transform3D(-0.887815, 0, -0.4602, 0, 1, 0, 0.4602, 0, -0.887815, 23.4912, 0.308877, 47.5064)
material_override = SubResource("ShaderMaterial_jm846")
use_collision = true
size = Vector3(8, 2.8783, 12)

[node name="Wall2" type="CSGBox3D" parent="."]
transform = Transform3D(-0.846721, -0.26658, -0.460432, -0.300306, 0.953843, 0, 0.43918, 0.138271, -0.887695, 54.5711, -5.0513, 68.232)
material_override = SubResource("ShaderMaterial_k1spc")
use_collision = true
size = Vector3(98, 35, 12)

[node name="Player" parent="." instance=ExtResource("6_kvsvt")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -5.46196, 116.525, 0)

[node name="Ghibli Tree Leaves" parent="." instance=ExtResource("16_dmme4")]
transform = Transform3D(1.25, 0, 0, 0, 1.25, 0, 0, 0, 1.25, 38.8485, -2.04964, 9.06288)

[node name="Ghibli Tree Leaves2" parent="." instance=ExtResource("16_dmme4")]
transform = Transform3D(1.25, 0, 0, 0, 1.25, 0, 0, 0, 1.25, -0.961476, -2.04963, -32.4749)

[node name="Ghibli Tree Leaves3" parent="." instance=ExtResource("16_dmme4")]
transform = Transform3D(1.25, 0, 0, 0, 1.25, 0, 0, 0, 1.25, 25.3631, -2.04963, 110.174)

[node name="Ghibli Tree Leaves4" parent="." instance=ExtResource("16_dmme4")]
transform = Transform3D(1.25, 0, 0, 0, 1.25, 0, 0, 0, 1.25, -69.0113, -2.04963, 79.031)

[node name="GrassBaseTest" parent="." instance=ExtResource("8_1ssi0")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 13.9684, -2, 20)
